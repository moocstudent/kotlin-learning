package dsl

/**
 * @Author: zhangQi
 * @Date: 2020-11-26 10:53
 * https://github.com/Kotlin/kotlin-by-example/blob/master/examples/09_Kotlin_JS/06_HtmlBuilder.md
 */

fun main(args: Array<String>) {
    htmlBuilder(arrayOf("赚钱","养家","生存"))
}

fun htmlBuilder(strArr:Array<String>){
    val result =
        html {
            head {
                title { +"这是一个神奇的网站" }
            }
            body {
                h1 { +"本网站提供了搜索功能以及用户身份验证" }
                h2 { +"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
                p {+"很多网瘾毒瘾黄瘾游戏瘾青年加入本网站后成功戒除了这些有害身心的瘾,从此该网站正式在美交所挂牌上市"}

                //那么访问该网站
                a(href="https://moocstudent.github.io") {+"moocstudent"}

                //mixed content
                p{
                    "This is some"
                    b{+"mixed"}
                    +"text. for more see the"
                    a(href="https://www.cnblogs.com/ukzq") {+"cnblogs/ukzq"}
                    +"website"
                }
                p{+"some text"}

                //content generated by
                p{
                    for(arg in strArr)
                        +arg
                }
            }
        }
    println(result)
}

interface Element {
    fun render(builder: StringBuilder, indent: String)
}

class TextElement(val text: String) : Element {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

@DslMarker
annotation class HtmlTagMarker

fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

@HtmlTagMarker
abstract class Tag(val name: String) : Element {
    val children = arrayListOf<Element>()
    val attributes = hashMapOf<String, String>()

    protected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + " ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String {
        val builder = StringBuilder()
        for ((attr, value) in attributes) {
            builder.append(" $attr=\"$value\"")
        }
        return builder.toString()
    }

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    fun head(init: Head.() -> Unit) = initTag(Head(), init)
    fun body(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head : TagWithText("head") {
    fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    fun b(init: B.() -> Unit) = initTag(B(), init)
    fun p(init: P.() -> Unit) = initTag(P(), init)
    fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    fun h2(init: H2.() -> Unit) = initTag(H2(), init)
    fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body : BodyTag("body")
class B : BodyTag("b")
class P : BodyTag("p")
class H1 : BodyTag("h1")
class H2 : BodyTag("h2")

class A : BodyTag("a") {
    var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}
